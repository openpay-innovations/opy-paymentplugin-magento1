<?php
/**
 * IntegrationApiModelsOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openpay\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Integration API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Openpay\Client\Model;

use \ArrayAccess;
use \Openpay\Client\ObjectSerializer;

/**
 * IntegrationApiModelsOrder Class Doc Comment
 *
 * @category Class
 * @package  Openpay\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationApiModelsOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IntegrationApi.Models.Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
'black_list_match' => 'int',
'order_status' => 'string',
'plan_status' => 'string',
'purchase_price' => 'int',
'retailer_amount' => 'int',
'next_action' => '\Openpay\Client\Model\IntegrationApiModelsNextAction'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
'black_list_match' => 'int32',
'order_status' => null,
'plan_status' => null,
'purchase_price' => 'int32',
'retailer_amount' => 'int32',
'next_action' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId',
'black_list_match' => 'blackListMatch',
'order_status' => 'orderStatus',
'plan_status' => 'planStatus',
'purchase_price' => 'purchasePrice',
'retailer_amount' => 'retailerAmount',
'next_action' => 'nextAction'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
'black_list_match' => 'setBlackListMatch',
'order_status' => 'setOrderStatus',
'plan_status' => 'setPlanStatus',
'purchase_price' => 'setPurchasePrice',
'retailer_amount' => 'setRetailerAmount',
'next_action' => 'setNextAction'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
'black_list_match' => 'getBlackListMatch',
'order_status' => 'getOrderStatus',
'plan_status' => 'getPlanStatus',
'purchase_price' => 'getPurchasePrice',
'retailer_amount' => 'getRetailerAmount',
'next_action' => 'getNextAction'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['black_list_match'] = isset($data['black_list_match']) ? $data['black_list_match'] : null;
        $this->container['order_status'] = isset($data['order_status']) ? $data['order_status'] : null;
        $this->container['plan_status'] = isset($data['plan_status']) ? $data['plan_status'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['retailer_amount'] = isset($data['retailer_amount']) ? $data['retailer_amount'] : null;
        $this->container['next_action'] = isset($data['next_action']) ? $data['next_action'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The Openpay-generated ID of this order
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets black_list_match
     *
     * @return int
     */
    public function getBlackListMatch()
    {
        return $this->container['black_list_match'];
    }

    /**
     * Sets black_list_match
     *
     * @param int $black_list_match -1 = Not enough information supplied to check BlackList  0 = No match against black list database  1 = One or more attributes supplied match a black list
     *
     * @return $this
     */
    public function setBlackListMatch($black_list_match)
    {
        $this->container['black_list_match'] = $black_list_match;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status The status the order is in
     *
     * @return $this
     */
    public function setOrderStatus($order_status)
    {
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets plan_status
     *
     * @return string
     */
    public function getPlanStatus()
    {
        return $this->container['plan_status'];
    }

    /**
     * Sets plan_status
     *
     * @param string $plan_status The status the plan is in
     *
     * @return $this
     */
    public function setPlanStatus($plan_status)
    {
        $this->container['plan_status'] = $plan_status;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return int
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param int $purchase_price The price for the whole order  An integer number in the lowest denomination in the currency being used (e.g. 1034 indicates $10.34)
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets retailer_amount
     *
     * @return int
     */
    public function getRetailerAmount()
    {
        return $this->container['retailer_amount'];
    }

    /**
     * Sets retailer_amount
     *
     * @param int $retailer_amount The amount the retailer will get for the order  An integer number in the lowest denomination in the currency being used (e.g. 1034 indicates $10.34)
     *
     * @return $this
     */
    public function setRetailerAmount($retailer_amount)
    {
        $this->container['retailer_amount'] = $retailer_amount;

        return $this;
    }

    /**
     * Gets next_action
     *
     * @return \Openpay\Client\Model\IntegrationApiModelsNextAction
     */
    public function getNextAction()
    {
        return $this->container['next_action'];
    }

    /**
     * Sets next_action
     *
     * @param \Openpay\Client\Model\IntegrationApiModelsNextAction $next_action next_action
     *
     * @return $this
     */
    public function setNextAction($next_action)
    {
        $this->container['next_action'] = $next_action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
