<?php
/**
 * IntegrationApiModelsCommandsCustomerJourney
 *
 * PHP version 5
 *
 * @category Class
 * @package  Openpay\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Integration API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.22
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Openpay\Client\Model;

use \ArrayAccess;
use \Openpay\Client\ObjectSerializer;

/**
 * IntegrationApiModelsCommandsCustomerJourney Class Doc Comment
 *
 * @category Class
 * @description The details of the customer journey integration being used for this call
 * @package  Openpay\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationApiModelsCommandsCustomerJourney implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IntegrationApi.Models.Commands.CustomerJourney';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'origin' => '\Openpay\Client\Model\IntegrationApiModelsCommandsOrderOrigin',
'online' => '\Openpay\Client\Model\IntegrationApiModelsCommandsOnlineJourneyDetails',
'pos_app' => '\Openpay\Client\Model\IntegrationApiModelsCommandsPosAppJourneyDetails',
'pos_web' => '\Openpay\Client\Model\IntegrationApiModelsCommandsPosWebJourneyDetails'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'origin' => null,
'online' => null,
'pos_app' => null,
'pos_web' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'origin' => 'origin',
'online' => 'online',
'pos_app' => 'posApp',
'pos_web' => 'posWeb'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'origin' => 'setOrigin',
'online' => 'setOnline',
'pos_app' => 'setPosApp',
'pos_web' => 'setPosWeb'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'origin' => 'getOrigin',
'online' => 'getOnline',
'pos_app' => 'getPosApp',
'pos_web' => 'getPosWeb'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['online'] = isset($data['online']) ? $data['online'] : null;
        $this->container['pos_app'] = isset($data['pos_app']) ? $data['pos_app'] : null;
        $this->container['pos_web'] = isset($data['pos_web']) ? $data['pos_web'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets origin
     *
     * @return \Openpay\Client\Model\IntegrationApiModelsCommandsOrderOrigin
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param \Openpay\Client\Model\IntegrationApiModelsCommandsOrderOrigin $origin origin
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets online
     *
     * @return \Openpay\Client\Model\IntegrationApiModelsCommandsOnlineJourneyDetails
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param \Openpay\Client\Model\IntegrationApiModelsCommandsOnlineJourneyDetails $online online
     *
     * @return $this
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets pos_app
     *
     * @return \Openpay\Client\Model\IntegrationApiModelsCommandsPosAppJourneyDetails
     */
    public function getPosApp()
    {
        return $this->container['pos_app'];
    }

    /**
     * Sets pos_app
     *
     * @param \Openpay\Client\Model\IntegrationApiModelsCommandsPosAppJourneyDetails $pos_app pos_app
     *
     * @return $this
     */
    public function setPosApp($pos_app)
    {
        $this->container['pos_app'] = $pos_app;

        return $this;
    }

    /**
     * Gets pos_web
     *
     * @return \Openpay\Client\Model\IntegrationApiModelsCommandsPosWebJourneyDetails
     */
    public function getPosWeb()
    {
        return $this->container['pos_web'];
    }

    /**
     * Sets pos_web
     *
     * @param \Openpay\Client\Model\IntegrationApiModelsCommandsPosWebJourneyDetails $pos_web pos_web
     *
     * @return $this
     */
    public function setPosWeb($pos_web)
    {
        $this->container['pos_web'] = $pos_web;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
